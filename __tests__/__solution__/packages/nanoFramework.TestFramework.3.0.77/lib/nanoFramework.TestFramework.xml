<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nanoFramework.TestFramework</name>
    </assembly>
    <members>
        <member name="T:nanoFramework.TestFramework.Assert">
            <summary>
            A collection of helper classes to test various conditions within unit tests. If the condition being tested is not met, an exception is thrown.
            </summary>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified objects refer to different objects and throws an exception if the two inputs refer to the same object.
            </summary>
            <param name="notExpected">The first object to compare. This is the value the test expects not to match actual.</param>
            <param name="actual">The second object to compare. This is the value produced by the code under test.</param>
            <param name="message">The message to include in the exception when <paramref name="actual"/> is the same as <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> refers to the same object as <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified objects both refer to the same object and throws an exception if the two inputs do not refer to the same object.
            </summary>
            <param name="expected">The first object to compare. This is the value the test expects.</param>
            <param name="actual">The second object to compare. This is the value produced by the code under test.</param>
            <param name="message">The message to include in the exception when <paramref name="actual"/> is not the same as <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> does not refer to the same object as <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Contains(System.String,System.String,System.String)">
            <summary>
            Tests whether a string contains another string.
            </summary>
            <param name="expected">The string that is expected to be found on the <paramref name="value"/> string.</param>
            <param name="value">The string to check for the <paramref name="expected"/> string.</param>
            <param name="message">The message to include in the exception when the <paramref name="expected"/> string is not contained in the <paramref name="value"/> string. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if the <paramref name="value"/> string contains the <paramref name="expected"/> string.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.DoesNotContains(System.String,System.String,System.String)">
            <summary>
            Tests whether a string doesn't contain another string.
            </summary>
            <param name="notExpected">The string that is not expected to be found on the <paramref name="value"/> string.</param>
            <param name="value">The string to check for the <paramref name="notExpected"/> string.</param>
            <param name="message">The message to include in the exception when the <paramref name="notExpected"/> string is contained in the <paramref name="value"/> string. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if the <paramref name="value"/> string does not contain the <paramref name="notExpected"/> string.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.EndsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether a string ends with another string.
            </summary>
            <param name="expected">The string that is expected to be found at the end of the <paramref name="value"/> string.</param>
            <param name="value">The string to check for the <paramref name="expected"/> string.</param>
            <param name="message">The message to include in the exception when the <paramref name="expected"/> string is not found at the end of the <paramref name="value"/> string. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if the <paramref name="value"/> string does not end with the <paramref name="expected"/> string.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is false and throws an exception if the condition is true.
            </summary>
            <param name="condition">The condition the test expects to be false.</param>
            <param name="message">The message to include in the exception when condition is true. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if condition is <see langword="true"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.IsInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Tests whether the specified object is an instance of the expected type and throws an exception if the expected type is not in the inheritance hierarchy of the object.
            </summary>
            <param name="expected">The expected type of value.</param>
            <param name="value">The object the test expects to be of the specified type.</param>
            <param name="message">The message to include in the exception when value is not an instance of expected. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="value"/> is <see langword="null"/> or <paramref name="expected"/> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.IsNotInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Tests whether the specified object is not an instance of the wrong type and throws an exception if the specified type is in the inheritance hierarchy of the object.
            </summary>
            <param name="value">The object the test expects not to be of the specified type.</param>
            <param name="notExpected">The type that value should not be.</param>
            <param name="message">The message to include in the exception when value is an instance of notExpected. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="value"/> is not <see langword="null"/> and <paramref name="notExpected"/> is in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Tests whether the specified object is non-null and throws an exception if it is null.
            </summary>
            <param name="value">The object the test expects not to be null.</param>
            <param name="message">The message to include in the exception when value is null. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if value is null.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.IsNull(System.Object,System.String)">
            <summary>
            Tests whether the specified object is null and throws an exception if it is not.
            </summary>
            <param name="value">The object the test expects to be null.</param>
            <param name="message">The message to include in the exception when value is not null. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if value is not null.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is true and throws an exception if the condition is false.
            </summary>
            <param name="condition">The condition the test expects to be true.</param>
            <param name="message">The message to include in the exception when condition is false. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if condition is <see langword="false"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.SkipTest(System.String)">
            <summary>
            Call this method to indicate that a test should be skipped.
            </summary>
            <param name="message">The message to include in the exception when the test is skipped. The message is shown in test results.</param>
            <exception cref="T:nanoFramework.TestFramework.SkipTestException">Thrown to indicate that a test should be skipped.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.StartsWith(System.String,System.String,System.String)">
            <summary>
            Tests whether a string starts with another string.
            </summary>
            <param name="expected">The string that is expected to be found at the beginning of the <paramref name="value"/> string.</param>
            <param name="value">The string to check for the <paramref name="expected"/> string.</param>
            <param name="message">The message to include in the exception when the <paramref name="expected"/> string is not found at the beginning of the <paramref name="value"/> string. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if the <paramref name="value"/> string does not start with the <paramref name="expected"/> string.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.ThrowsException(System.Type,System.Action,System.String)">
            <summary>
            Tests whether the code specified by delegate action throws exact given exception
            of type <paramref name="exception"/> (and not of derived type) and throws <see cref="T:TestFrameworkShared.AssertFailedException"/> if code
            does not throw exception or throws exception of type other than <paramref name="exception"/>.
            </summary>
            <param name="exception">Type of exception expected to be thrown.</param>
            <param name="action">Delegate to code to be tested and which is expected to throw exception.</param>
            <param name="message">The message to include in the exception when action does not throw exception of type <paramref name="exception"/>.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if action does not throw exception of type <paramref name="exception"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.Boolean,System.Boolean,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.Byte,System.Byte,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.Char,System.Char,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.DateTime,System.DateTime,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified objects are equal and throws an exception if the two objects are unequal. 
            </summary>
            <param name="expected">The first objects to compare. This is the objects the tests expects.</param>
            <param name="actual">The second objects to compare. This is the objects produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.SByte,System.SByte,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.Int16,System.Int16,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreEqual(System.UInt16,System.UInt16,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.Boolean,System.Boolean,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.Byte,System.Byte,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.Char,System.Char,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.DateTime,System.DateTime,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified object are unequal and throws an exception if the two object are equal. 
            </summary>
            <param name="notExpected">The first object to compare. This is the object the tests expects.</param>
            <param name="actual">The second object to compare. This is the object produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.SByte,System.SByte,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.Int16,System.Int16,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.AreNotEqual(System.UInt16,System.UInt16,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Empty(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collection is empty.
            </summary>
            <param name="collection">The collection the test expects to be empty.</param>
            <param name="message">The message to include in the exception when the collection is empty. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Raises an exception if the collection is not empty.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.Array,System.Array,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.Boolean,System.Boolean,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.Byte,System.Byte,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.Char,System.Char,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.DateTime,System.DateTime,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.Int32,System.Int32,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.Int64,System.Int64,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.SByte,System.SByte,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.Int16,System.Int16,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.UInt32,System.UInt32,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.UInt64,System.UInt64,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Equal(System.UInt16,System.UInt16,System.String)">
            <summary>
            Tests whether the specified values are equal and throws an exception if the two values are unequal. 
            </summary>
            <param name="expected">The first value to compare. This is the value the tests expects.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.False(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is false and throws an exception if the condition is true.
            </summary>
            <param name="condition">The condition the test expects to be false.</param>
            <param name="message">The message to include in the exception when condition is true. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if condition is <see langword="true"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.IsNotType(System.Type,System.Object,System.String)">
            <summary>
            Tests whether the specified object is not an instance of the wrong type and throws an exception if the specified type is in the inheritance hierarchy of the object.
            </summary>
            <param name="value">The object the test expects not to be of the specified type.</param>
            <param name="wrongType">The type that value should not be.</param>
            <param name="message">The message to include in the exception when value is an instance of wrongType. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="value"/> is not null and <paramref name="wrongType"/> is in the inheritance hierarchy of value.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.IsType(System.Type,System.Object,System.String)">
            <summary>
            Tests whether the specified object is an instance of the expected type and throws an exception if the expected type is not in the inheritance hierarchy of the object.
            </summary>
            <param name="expectedType">The expected type of value.</param>
            <param name="value">The object the test expects to be of the specified type.</param>
            <param name="message">The message to include in the exception when value is not an instance of expectedType. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="value"/> is <see langword="null"/> or <paramref name="expectedType"/> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collection is not empty.
            </summary>
            <param name="collection">The collection the test expects not to be empty.</param>
            <param name="message">The message to include in the exception when the collection is not empty. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Raises an exception if the collection is not empty.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.Array,System.Array,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.Boolean,System.Boolean,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.Byte,System.Byte,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.Char,System.Char,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.DateTime,System.DateTime,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/>.</param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.Double,System.Double,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.Single,System.Single,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.SByte,System.SByte,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.Int16,System.Int16,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.String,System.String,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotEqual(System.UInt16,System.UInt16,System.String)">
            <summary>
            Tests whether the specified values are unequal and throws an exception if the two values are equal. 
            </summary>
            <param name="notExpected">The first value to compare. This is the value the test expects not to match <paramref name="actual"/></param>
            <param name="actual">The second value to compare. This is the value produced by the code under test.</param>
            <param name="message"> The message to include in the exception when <paramref name="actual"/> is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotNull(System.Object,System.String)">
            <summary>
            Tests whether the specified object is non-null and throws an exception if it is null.
            </summary>
            <param name="value">The object the test expects not to be null.</param>
            <param name="message">The message to include in the exception when value is null. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if value is null.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.NotSame(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified objects refer to different objects and throws an exception if the two inputs refer to the same object.
            </summary>
            <param name="notExpected">The first object to compare. This is the value the test expects not to match actual.</param>
            <param name="actual">The second object to compare. This is the value produced by the code under test.</param>
            <param name="message">The message to include in the exception when <paramref name="actual"/> is the same as <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> refers to the same object as <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Null(System.Object,System.String)">
            <summary>
            Tests whether the specified object is null and throws an exception if it is not.
            </summary>
            <param name="value">The object the test expects to be null.</param>
            <param name="message">The message to include in the exception when value is not null. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if value is not null.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Same(System.Object,System.Object,System.String)">
            <summary>
            Tests whether the specified objects both refer to the same object and throws an exception if the two inputs do not refer to the same object.
            </summary>
            <param name="expected">The first object to compare. This is the value the test expects.</param>
            <param name="actual">The second object to compare. This is the value produced by the code under test.</param>
            <param name="message">The message to include in the exception when <paramref name="actual"/> is not the same as <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> does not refer to the same object as <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.Throws(System.Type,System.Action,System.String)">
            <summary>
            Tests whether the code specified by delegate action throws exact given exception
            of type <paramref name="exceptionType"/> (and not of derived type) and throws <see cref="T:TestFrameworkShared.AssertFailedException"/> if code
            does not throw exception or throws exception of type other than <paramref name="exceptionType"/>.
            </summary>
            <param name="exceptionType">Type of exception expected to be thrown.</param>
            <param name="action">Delegate to code to be tested and which is expected to throw exception.</param>
            <param name="message">The message to include in the exception when action does not throw exception of type <paramref name="exceptionType"/>.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if action does not throw exception of type <paramref name="exceptionType"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.Assert.True(System.Boolean,System.String)">
            <summary>
            Tests whether the specified condition is true and throws an exception if the condition is false.
            </summary>
            <param name="condition">The condition the test expects to be true.</param>
            <param name="message">The message to include in the exception when condition is false. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if condition is <see langword="false"/>.</exception>
        </member>
        <member name="T:nanoFramework.TestFramework.CollectionAssert">
            <summary>
            A collection of helper classes to test various conditions associated
            with collections within unit tests. If the condition being tested is not
            met, an exception is thrown.
            </summary>
        </member>
        <member name="M:nanoFramework.TestFramework.CollectionAssert.Empty(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collection is empty.
            </summary>
            <param name="collection">The collection the test expects to be empty.</param>
            <param name="message">The message to include in the exception when the collection is empty. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Raises an exception if the collection is not empty.</exception>
            <exception cref="T:System.ArgumentNullException">Raises an exception if the collection is null.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.CollectionAssert.NotEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collection is not empty.
            </summary>
            <param name="collection">The collection the test expects not to be empty.</param>
            <param name="message">The message to include in the exception when the collection is not empty. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Raises an exception if the collection is not empty.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collections are equal and throws an exception if the two collections are not equal. Equality is defined as having the same elements in the same order and quantity. Different references to the same value are considered equal.
            </summary>
            <param name="expected">The first collection to compare. This is the collection the tests expects.</param>
            <param name="actual"> The second collection to compare. This is the collection produced by the code under test.</param>
            <param name="message">The message to include in the exception when <paramref name="actual"/> is not equal to <paramref name="expected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="expected"/> is not equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="M:nanoFramework.TestFramework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
            <summary>
            Tests whether the specified collections are unequal and throws an exception if the two collections are equal. Equality is defined as having the same elements in the same order and quantity. Different references to the same value are considered equal.
            </summary>
            <param name="notExpected">The first collection to compare. This is the collection the tests expects not to match <paramref name="actual"/>.</param>
            <param name="actual"> The second collection to compare. This is the collection produced by the code under test.</param>
            <param name="message"> The message to include in the exception when actual is equal to <paramref name="notExpected"/>. The message is shown in test results.</param>
            <exception cref="T:TestFrameworkShared.AssertFailedException">Thrown if <paramref name="notExpected"/> is equal to <paramref name="actual"/>.</exception>
        </member>
        <member name="T:nanoFramework.TestFramework.OutputHelper">
            <summary>
            Helper class to allow output messages from Unit Tests.
            </summary>
        </member>
        <member name="M:nanoFramework.TestFramework.OutputHelper.Write(System.String)">
            <summary>
            Writes a message to the test trace output.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:nanoFramework.TestFramework.OutputHelper.WriteLine(System.String)">
            <summary>
            Writes a message followed by a line terminator to the test trace output.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="T:nanoFramework.TestFramework.TestExtensions">
            <summary>
            Extension for array element comparison
            </summary>
        </member>
        <member name="M:nanoFramework.TestFramework.TestExtensions.SequenceEqual(System.Array,System.Array)">
            <summary>
            Compare the sequence of 2 arrays
            </summary>
            <param name="a">First array</param>
            <param name="b">Second array</param>
            <returns>True if the sequence is the same</returns>
        </member>
        <member name="T:nanoFramework.TestFramework.CleanupAttribute">
            <summary>
            Clean up attribute typically used to clean up after the tests, it will always been called the last after all the Test Method run.
            </summary>
        </member>
        <member name="T:nanoFramework.TestFramework.DataRowAttribute">
            <summary>
            Data row attribute. Used for passing multiple parameters into same test method.
            </summary>
        </member>
        <member name="P:nanoFramework.TestFramework.DataRowAttribute.MethodParameters">
            <summary>
            Array containing all passed parameters
            </summary>
        </member>
        <member name="M:nanoFramework.TestFramework.DataRowAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the DataRowAttribute class.
            </summary>
            <param name="methodParameters">Parameters which should be stored for future execution of test method</param>
            <exception cref="T:System.ArgumentNullException">Thrown when methodParameters is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when methodParameters is empty</exception>
        </member>
        <member name="T:nanoFramework.TestFramework.Helper">
            <summary>
            Helper class for keeping test name same in TestAdapter and TestRunner
            </summary>
        </member>
        <member name="M:nanoFramework.TestFramework.Helper.RemoveTestMethodIfDataRowExists(System.Object[])">
            <summary>
            Removes "TestMethod" attribute from array if "DataRow" attribute exists in the same array
            </summary>
            <param name="attribs">Array of attributes to check</param>
            <returns>New array without TestMethod if DataRow exists, if not the same array</returns>
        </member>
        <member name="T:nanoFramework.TestFramework.SetupAttribute">
            <summary>
            Setup attribute, will always be launched first by the launcher, typically used to setup hardware or classes that has to be used in all the tests.
            </summary>
        </member>
        <member name="T:nanoFramework.TestFramework.SkipTestException">
            <summary>
            To skip a test, raise this exception through the Assert.SkipTest("some message");
            </summary>
        </member>
        <member name="M:nanoFramework.TestFramework.SkipTestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SkipTestException class with a specified error message
            and a reference to the inner SkipTestException that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException"></param>
        </member>
        <member name="T:nanoFramework.TestFramework.TestClassAttribute">
            <summary>
            The test class attribute.
            </summary>
        </member>
        <member name="M:nanoFramework.TestFramework.TestClassAttribute.GetTestMethodAttribute(nanoFramework.TestFramework.TestMethodAttribute)">
            <summary>
            Gets a test method attribute that enables running this test.
            </summary>
            <param name="testMethodAttribute">The test method attribute instance defined on this method.</param>
            <returns>The <see cref="T:nanoFramework.TestFramework.TestMethodAttribute"/> to be used to run this test.</returns>
            <remarks>Extensions can override this method to customize how all methods in a class are run.</remarks>
        </member>
        <member name="T:nanoFramework.TestFramework.TestMethodAttribute">
            <summary>
            The test method attribute.
            </summary>
        </member>
        <member name="T:TestFrameworkShared.AssertFailedException">
            <summary>
            <see cref="T:TestFrameworkShared.AssertFailedException"/> class. Used to indicate failure for a test case.
            </summary>
        </member>
        <member name="M:TestFrameworkShared.AssertFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TestFrameworkShared.AssertFailedException"/> class.
            </summary>
            <param name="msg">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:TestFrameworkShared.AssertFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TestFrameworkShared.AssertFailedException"/> class.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:TestFrameworkShared.AssertFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TestFrameworkShared.AssertFailedException"/> class.
            </summary>
        </member>
    </members>
</doc>
